#!/usr/bin/env node
var nunjucks= require("nunjucks"),
  stream= require("stream"),
  util= require("util")

function Rc2Yaml(opts){
	if(!(this instanceof Rc2Yaml)){
		return new Rc2Yaml()
	}
	Rc2Yaml.super_.call(this,opts)
	opts= opts||{}

	this.configure(opts)
}
util.inherits(Rc2Yaml, stream.Transform)
Rc2Yaml.prototype._transform= function(chunk,enc,cb){
	var stanza= this.stanza||(this.stanza= {})
	console.log("chunk",chunk,this.stanza)
	var comm= this.comment.exec(chunk)
	if(comm){
		var comms= stanza.comments||(stanza.comments= [])
		comms.push(comm[1])
	}
	var kv= comm?null:this.line.exec(chunk)
	if(kv){
		stanza.key= kv[1]
		stanza.value= kv[2]
		var rendered= this.template.render(stanza)
		this.push(rendered)
		this.stanza= null
	}
	cb()
}
Rc2Yaml.prototype._flush= function(done){
	done()
}
Rc2Yaml.prototype.configure= function(opts){
	var chomp= opts.noChomp?"":"\\s*",
	  comments= (opts.comment||"^#")+chomp+"(.*)",
	  line= "(.+?)"+chomp+(opts.lineSep||"\\s")+chomp+"(.*)",
	  template= opts.template||"yaml.nun"
console.log("==",line,comments)
	this.comment= new RegExp(comments)
	this.line= new RegExp(line)
	this.nunjucks= new nunjucks.Environment(new nunjucks.FileSystemLoader(".", true), { autoescape: false })
	this.template= this.nunjucks.getTemplate(template, true)
}

if(require.main == module){
	var eachline= require("eachline"),
	  optimist= require("optimist"),
	  stdin= process.stdin,
	  stdout= process.stdout
	var argv= optimist.argv
	stdin.pipe(new eachline()).pipe(new Rc2Yaml()).pipe(stdout)
}
